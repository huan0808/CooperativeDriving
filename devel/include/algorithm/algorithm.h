// Generated by gencpp from file algorithm/algorithm.msg
// DO NOT EDIT!


#ifndef ALGORITHM_MESSAGE_ALGORITHM_H
#define ALGORITHM_MESSAGE_ALGORITHM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace algorithm
{
template <class ContainerAllocator>
struct algorithm_
{
  typedef algorithm_<ContainerAllocator> Type;

  algorithm_()
    : CurrentSteeringAngle(0.0)
    , LongitudinalAccel(0.0)  {
    }
  algorithm_(const ContainerAllocator& _alloc)
    : CurrentSteeringAngle(0.0)
    , LongitudinalAccel(0.0)  {
  (void)_alloc;
    }



   typedef double _CurrentSteeringAngle_type;
  _CurrentSteeringAngle_type CurrentSteeringAngle;

   typedef double _LongitudinalAccel_type;
  _LongitudinalAccel_type LongitudinalAccel;





  typedef boost::shared_ptr< ::algorithm::algorithm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::algorithm::algorithm_<ContainerAllocator> const> ConstPtr;

}; // struct algorithm_

typedef ::algorithm::algorithm_<std::allocator<void> > algorithm;

typedef boost::shared_ptr< ::algorithm::algorithm > algorithmPtr;
typedef boost::shared_ptr< ::algorithm::algorithm const> algorithmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::algorithm::algorithm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::algorithm::algorithm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::algorithm::algorithm_<ContainerAllocator1> & lhs, const ::algorithm::algorithm_<ContainerAllocator2> & rhs)
{
  return lhs.CurrentSteeringAngle == rhs.CurrentSteeringAngle &&
    lhs.LongitudinalAccel == rhs.LongitudinalAccel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::algorithm::algorithm_<ContainerAllocator1> & lhs, const ::algorithm::algorithm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace algorithm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::algorithm::algorithm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::algorithm::algorithm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::algorithm::algorithm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::algorithm::algorithm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::algorithm::algorithm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::algorithm::algorithm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::algorithm::algorithm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9844dd521b673e544e6966cec9aa7917";
  }

  static const char* value(const ::algorithm::algorithm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9844dd521b673e54ULL;
  static const uint64_t static_value2 = 0x4e6966cec9aa7917ULL;
};

template<class ContainerAllocator>
struct DataType< ::algorithm::algorithm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "algorithm/algorithm";
  }

  static const char* value(const ::algorithm::algorithm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::algorithm::algorithm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 CurrentSteeringAngle\n"
"float64 LongitudinalAccel\n"
;
  }

  static const char* value(const ::algorithm::algorithm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::algorithm::algorithm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CurrentSteeringAngle);
      stream.next(m.LongitudinalAccel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct algorithm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::algorithm::algorithm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::algorithm::algorithm_<ContainerAllocator>& v)
  {
    s << indent << "CurrentSteeringAngle: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentSteeringAngle);
    s << indent << "LongitudinalAccel: ";
    Printer<double>::stream(s, indent + "  ", v.LongitudinalAccel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALGORITHM_MESSAGE_ALGORITHM_H
