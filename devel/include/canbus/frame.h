// Generated by gencpp from file canbus/frame.msg
// DO NOT EDIT!


#ifndef CANBUS_MESSAGE_FRAME_H
#define CANBUS_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace canbus
{
template <class ContainerAllocator>
struct frame_
{
  typedef frame_<ContainerAllocator> Type;

  frame_()
    : VI_GearInfo(0)
    , VI_BrakeInfo(0)
    , VI_Button1(0)
    , VI_Button2(0)
    , VI_HandBrakeSt(0)
    , VI_JerkSt(0)
    , VI_AccelPedalPosition(0.0)
    , VI_FrontSteeringAngle(0.0)
    , VI_RemainingTimes(0.0)
    , VI_VehicleSpeed(0.0)
    , SI2_LongitudinalAccel(0.0)
    , SI2_LateralAccel(0.0)
    , SI2_YawRate(0.0)
    , SR_CurrentSteeringAngle(0.0)
    , SR_CurrentSteeringSpeed(0.0)
    , SR_HandTorque(0.0)
    , SR_HandTorqueSign(0.0)
    , SR_WorkMode(0)
    , SR_HandTorqueLimit(0.0)
    , SR_Error(0)
    , SR_Warning(0)
    , SR_LiveCounter(0.0)  {
    }
  frame_(const ContainerAllocator& _alloc)
    : VI_GearInfo(0)
    , VI_BrakeInfo(0)
    , VI_Button1(0)
    , VI_Button2(0)
    , VI_HandBrakeSt(0)
    , VI_JerkSt(0)
    , VI_AccelPedalPosition(0.0)
    , VI_FrontSteeringAngle(0.0)
    , VI_RemainingTimes(0.0)
    , VI_VehicleSpeed(0.0)
    , SI2_LongitudinalAccel(0.0)
    , SI2_LateralAccel(0.0)
    , SI2_YawRate(0.0)
    , SR_CurrentSteeringAngle(0.0)
    , SR_CurrentSteeringSpeed(0.0)
    , SR_HandTorque(0.0)
    , SR_HandTorqueSign(0.0)
    , SR_WorkMode(0)
    , SR_HandTorqueLimit(0.0)
    , SR_Error(0)
    , SR_Warning(0)
    , SR_LiveCounter(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _VI_GearInfo_type;
  _VI_GearInfo_type VI_GearInfo;

   typedef int32_t _VI_BrakeInfo_type;
  _VI_BrakeInfo_type VI_BrakeInfo;

   typedef int32_t _VI_Button1_type;
  _VI_Button1_type VI_Button1;

   typedef int32_t _VI_Button2_type;
  _VI_Button2_type VI_Button2;

   typedef int32_t _VI_HandBrakeSt_type;
  _VI_HandBrakeSt_type VI_HandBrakeSt;

   typedef int32_t _VI_JerkSt_type;
  _VI_JerkSt_type VI_JerkSt;

   typedef double _VI_AccelPedalPosition_type;
  _VI_AccelPedalPosition_type VI_AccelPedalPosition;

   typedef double _VI_FrontSteeringAngle_type;
  _VI_FrontSteeringAngle_type VI_FrontSteeringAngle;

   typedef double _VI_RemainingTimes_type;
  _VI_RemainingTimes_type VI_RemainingTimes;

   typedef double _VI_VehicleSpeed_type;
  _VI_VehicleSpeed_type VI_VehicleSpeed;

   typedef double _SI2_LongitudinalAccel_type;
  _SI2_LongitudinalAccel_type SI2_LongitudinalAccel;

   typedef double _SI2_LateralAccel_type;
  _SI2_LateralAccel_type SI2_LateralAccel;

   typedef double _SI2_YawRate_type;
  _SI2_YawRate_type SI2_YawRate;

   typedef double _SR_CurrentSteeringAngle_type;
  _SR_CurrentSteeringAngle_type SR_CurrentSteeringAngle;

   typedef double _SR_CurrentSteeringSpeed_type;
  _SR_CurrentSteeringSpeed_type SR_CurrentSteeringSpeed;

   typedef double _SR_HandTorque_type;
  _SR_HandTorque_type SR_HandTorque;

   typedef double _SR_HandTorqueSign_type;
  _SR_HandTorqueSign_type SR_HandTorqueSign;

   typedef int32_t _SR_WorkMode_type;
  _SR_WorkMode_type SR_WorkMode;

   typedef double _SR_HandTorqueLimit_type;
  _SR_HandTorqueLimit_type SR_HandTorqueLimit;

   typedef int32_t _SR_Error_type;
  _SR_Error_type SR_Error;

   typedef int32_t _SR_Warning_type;
  _SR_Warning_type SR_Warning;

   typedef double _SR_LiveCounter_type;
  _SR_LiveCounter_type SR_LiveCounter;





  typedef boost::shared_ptr< ::canbus::frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::canbus::frame_<ContainerAllocator> const> ConstPtr;

}; // struct frame_

typedef ::canbus::frame_<std::allocator<void> > frame;

typedef boost::shared_ptr< ::canbus::frame > framePtr;
typedef boost::shared_ptr< ::canbus::frame const> frameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::canbus::frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::canbus::frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::canbus::frame_<ContainerAllocator1> & lhs, const ::canbus::frame_<ContainerAllocator2> & rhs)
{
  return lhs.VI_GearInfo == rhs.VI_GearInfo &&
    lhs.VI_BrakeInfo == rhs.VI_BrakeInfo &&
    lhs.VI_Button1 == rhs.VI_Button1 &&
    lhs.VI_Button2 == rhs.VI_Button2 &&
    lhs.VI_HandBrakeSt == rhs.VI_HandBrakeSt &&
    lhs.VI_JerkSt == rhs.VI_JerkSt &&
    lhs.VI_AccelPedalPosition == rhs.VI_AccelPedalPosition &&
    lhs.VI_FrontSteeringAngle == rhs.VI_FrontSteeringAngle &&
    lhs.VI_RemainingTimes == rhs.VI_RemainingTimes &&
    lhs.VI_VehicleSpeed == rhs.VI_VehicleSpeed &&
    lhs.SI2_LongitudinalAccel == rhs.SI2_LongitudinalAccel &&
    lhs.SI2_LateralAccel == rhs.SI2_LateralAccel &&
    lhs.SI2_YawRate == rhs.SI2_YawRate &&
    lhs.SR_CurrentSteeringAngle == rhs.SR_CurrentSteeringAngle &&
    lhs.SR_CurrentSteeringSpeed == rhs.SR_CurrentSteeringSpeed &&
    lhs.SR_HandTorque == rhs.SR_HandTorque &&
    lhs.SR_HandTorqueSign == rhs.SR_HandTorqueSign &&
    lhs.SR_WorkMode == rhs.SR_WorkMode &&
    lhs.SR_HandTorqueLimit == rhs.SR_HandTorqueLimit &&
    lhs.SR_Error == rhs.SR_Error &&
    lhs.SR_Warning == rhs.SR_Warning &&
    lhs.SR_LiveCounter == rhs.SR_LiveCounter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::canbus::frame_<ContainerAllocator1> & lhs, const ::canbus::frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace canbus

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::canbus::frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus::frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus::frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus::frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus::frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus::frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::canbus::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aaf52d1c4f27f1011105abbe0b2efe7";
  }

  static const char* value(const ::canbus::frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aaf52d1c4f27f10ULL;
  static const uint64_t static_value2 = 0x11105abbe0b2efe7ULL;
};

template<class ContainerAllocator>
struct DataType< ::canbus::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "canbus/frame";
  }

  static const char* value(const ::canbus::frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::canbus::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 VI_GearInfo  \n"
"int32 VI_BrakeInfo  \n"
"int32 VI_Button1  \n"
"int32 VI_Button2  \n"
"int32 VI_HandBrakeSt  \n"
"int32 VI_JerkSt  \n"
"float64 VI_AccelPedalPosition  \n"
"float64 VI_FrontSteeringAngle  \n"
"float64 VI_RemainingTimes  \n"
"float64 VI_VehicleSpeed  \n"
"float64 SI2_LongitudinalAccel  \n"
"float64 SI2_LateralAccel  \n"
"float64 SI2_YawRate  \n"
"\n"
"float64 SR_CurrentSteeringAngle \n"
"float64 SR_CurrentSteeringSpeed \n"
"float64 SR_HandTorque\n"
"float64 SR_HandTorqueSign\n"
"int32 SR_WorkMode \n"
"float64 SR_HandTorqueLimit \n"
"int32 SR_Error\n"
"int32 SR_Warning \n"
"float64 SR_LiveCounter \n"
;
  }

  static const char* value(const ::canbus::frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::canbus::frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VI_GearInfo);
      stream.next(m.VI_BrakeInfo);
      stream.next(m.VI_Button1);
      stream.next(m.VI_Button2);
      stream.next(m.VI_HandBrakeSt);
      stream.next(m.VI_JerkSt);
      stream.next(m.VI_AccelPedalPosition);
      stream.next(m.VI_FrontSteeringAngle);
      stream.next(m.VI_RemainingTimes);
      stream.next(m.VI_VehicleSpeed);
      stream.next(m.SI2_LongitudinalAccel);
      stream.next(m.SI2_LateralAccel);
      stream.next(m.SI2_YawRate);
      stream.next(m.SR_CurrentSteeringAngle);
      stream.next(m.SR_CurrentSteeringSpeed);
      stream.next(m.SR_HandTorque);
      stream.next(m.SR_HandTorqueSign);
      stream.next(m.SR_WorkMode);
      stream.next(m.SR_HandTorqueLimit);
      stream.next(m.SR_Error);
      stream.next(m.SR_Warning);
      stream.next(m.SR_LiveCounter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::canbus::frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::canbus::frame_<ContainerAllocator>& v)
  {
    s << indent << "VI_GearInfo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_GearInfo);
    s << indent << "VI_BrakeInfo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_BrakeInfo);
    s << indent << "VI_Button1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_Button1);
    s << indent << "VI_Button2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_Button2);
    s << indent << "VI_HandBrakeSt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_HandBrakeSt);
    s << indent << "VI_JerkSt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VI_JerkSt);
    s << indent << "VI_AccelPedalPosition: ";
    Printer<double>::stream(s, indent + "  ", v.VI_AccelPedalPosition);
    s << indent << "VI_FrontSteeringAngle: ";
    Printer<double>::stream(s, indent + "  ", v.VI_FrontSteeringAngle);
    s << indent << "VI_RemainingTimes: ";
    Printer<double>::stream(s, indent + "  ", v.VI_RemainingTimes);
    s << indent << "VI_VehicleSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.VI_VehicleSpeed);
    s << indent << "SI2_LongitudinalAccel: ";
    Printer<double>::stream(s, indent + "  ", v.SI2_LongitudinalAccel);
    s << indent << "SI2_LateralAccel: ";
    Printer<double>::stream(s, indent + "  ", v.SI2_LateralAccel);
    s << indent << "SI2_YawRate: ";
    Printer<double>::stream(s, indent + "  ", v.SI2_YawRate);
    s << indent << "SR_CurrentSteeringAngle: ";
    Printer<double>::stream(s, indent + "  ", v.SR_CurrentSteeringAngle);
    s << indent << "SR_CurrentSteeringSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.SR_CurrentSteeringSpeed);
    s << indent << "SR_HandTorque: ";
    Printer<double>::stream(s, indent + "  ", v.SR_HandTorque);
    s << indent << "SR_HandTorqueSign: ";
    Printer<double>::stream(s, indent + "  ", v.SR_HandTorqueSign);
    s << indent << "SR_WorkMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.SR_WorkMode);
    s << indent << "SR_HandTorqueLimit: ";
    Printer<double>::stream(s, indent + "  ", v.SR_HandTorqueLimit);
    s << indent << "SR_Error: ";
    Printer<int32_t>::stream(s, indent + "  ", v.SR_Error);
    s << indent << "SR_Warning: ";
    Printer<int32_t>::stream(s, indent + "  ", v.SR_Warning);
    s << indent << "SR_LiveCounter: ";
    Printer<double>::stream(s, indent + "  ", v.SR_LiveCounter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANBUS_MESSAGE_FRAME_H
