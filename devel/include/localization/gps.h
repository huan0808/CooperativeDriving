// Generated by gencpp from file localization/gps.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_GPS_H
#define LOCALIZATION_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localization
{
template <class ContainerAllocator>
struct gps_
{
  typedef gps_<ContainerAllocator> Type;

  gps_()
    : FPD_Header()
    , FPD_GPSWeek()
    , FPD_GPSTime()
    , Heading()
    , Pitch()
    , Roll()
    , Lattitude()
    , Longitude()
    , Altitude()
    , Ve()
    , Vn()
    , Vu()
    , Baseline()
    , NSV1()
    , NSV2()
    , Status()
    , FPD_Cs()
    , IMU_Header()
    , IMU_GPSWeek()
    , IMU_GPSTime()
    , GyroX()
    , GyroY()
    , GyroZ()
    , AccX()
    , AccY()
    , AccZ()
    , Tpr()
    , IMU_Cs()
    , x(0.0)
    , y(0.0)  {
    }
  gps_(const ContainerAllocator& _alloc)
    : FPD_Header(_alloc)
    , FPD_GPSWeek(_alloc)
    , FPD_GPSTime(_alloc)
    , Heading(_alloc)
    , Pitch(_alloc)
    , Roll(_alloc)
    , Lattitude(_alloc)
    , Longitude(_alloc)
    , Altitude(_alloc)
    , Ve(_alloc)
    , Vn(_alloc)
    , Vu(_alloc)
    , Baseline(_alloc)
    , NSV1(_alloc)
    , NSV2(_alloc)
    , Status(_alloc)
    , FPD_Cs(_alloc)
    , IMU_Header(_alloc)
    , IMU_GPSWeek(_alloc)
    , IMU_GPSTime(_alloc)
    , GyroX(_alloc)
    , GyroY(_alloc)
    , GyroZ(_alloc)
    , AccX(_alloc)
    , AccY(_alloc)
    , AccZ(_alloc)
    , Tpr(_alloc)
    , IMU_Cs(_alloc)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _FPD_Header_type;
  _FPD_Header_type FPD_Header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _FPD_GPSWeek_type;
  _FPD_GPSWeek_type FPD_GPSWeek;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _FPD_GPSTime_type;
  _FPD_GPSTime_type FPD_GPSTime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Heading_type;
  _Heading_type Heading;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Pitch_type;
  _Pitch_type Pitch;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Roll_type;
  _Roll_type Roll;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Lattitude_type;
  _Lattitude_type Lattitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Longitude_type;
  _Longitude_type Longitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Altitude_type;
  _Altitude_type Altitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Ve_type;
  _Ve_type Ve;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Vn_type;
  _Vn_type Vn;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Vu_type;
  _Vu_type Vu;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Baseline_type;
  _Baseline_type Baseline;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _NSV1_type;
  _NSV1_type NSV1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _NSV2_type;
  _NSV2_type NSV2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Status_type;
  _Status_type Status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _FPD_Cs_type;
  _FPD_Cs_type FPD_Cs;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _IMU_Header_type;
  _IMU_Header_type IMU_Header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _IMU_GPSWeek_type;
  _IMU_GPSWeek_type IMU_GPSWeek;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _IMU_GPSTime_type;
  _IMU_GPSTime_type IMU_GPSTime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _GyroX_type;
  _GyroX_type GyroX;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _GyroY_type;
  _GyroY_type GyroY;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _GyroZ_type;
  _GyroZ_type GyroZ;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _AccX_type;
  _AccX_type AccX;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _AccY_type;
  _AccY_type AccY;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _AccZ_type;
  _AccZ_type AccZ;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Tpr_type;
  _Tpr_type Tpr;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _IMU_Cs_type;
  _IMU_Cs_type IMU_Cs;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::localization::gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::gps_<ContainerAllocator> const> ConstPtr;

}; // struct gps_

typedef ::localization::gps_<std::allocator<void> > gps;

typedef boost::shared_ptr< ::localization::gps > gpsPtr;
typedef boost::shared_ptr< ::localization::gps const> gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization::gps_<ContainerAllocator1> & lhs, const ::localization::gps_<ContainerAllocator2> & rhs)
{
  return lhs.FPD_Header == rhs.FPD_Header &&
    lhs.FPD_GPSWeek == rhs.FPD_GPSWeek &&
    lhs.FPD_GPSTime == rhs.FPD_GPSTime &&
    lhs.Heading == rhs.Heading &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Roll == rhs.Roll &&
    lhs.Lattitude == rhs.Lattitude &&
    lhs.Longitude == rhs.Longitude &&
    lhs.Altitude == rhs.Altitude &&
    lhs.Ve == rhs.Ve &&
    lhs.Vn == rhs.Vn &&
    lhs.Vu == rhs.Vu &&
    lhs.Baseline == rhs.Baseline &&
    lhs.NSV1 == rhs.NSV1 &&
    lhs.NSV2 == rhs.NSV2 &&
    lhs.Status == rhs.Status &&
    lhs.FPD_Cs == rhs.FPD_Cs &&
    lhs.IMU_Header == rhs.IMU_Header &&
    lhs.IMU_GPSWeek == rhs.IMU_GPSWeek &&
    lhs.IMU_GPSTime == rhs.IMU_GPSTime &&
    lhs.GyroX == rhs.GyroX &&
    lhs.GyroY == rhs.GyroY &&
    lhs.GyroZ == rhs.GyroZ &&
    lhs.AccX == rhs.AccX &&
    lhs.AccY == rhs.AccY &&
    lhs.AccZ == rhs.AccZ &&
    lhs.Tpr == rhs.Tpr &&
    lhs.IMU_Cs == rhs.IMU_Cs &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization::gps_<ContainerAllocator1> & lhs, const ::localization::gps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::localization::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6cefa42fc634a5edcdb1a380b1794e86";
  }

  static const char* value(const ::localization::gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6cefa42fc634a5edULL;
  static const uint64_t static_value2 = 0xcdb1a380b1794e86ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/gps";
  }

  static const char* value(const ::localization::gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string FPD_Header\n"
"string FPD_GPSWeek\n"
"string FPD_GPSTime\n"
"string Heading\n"
"string Pitch\n"
"string Roll\n"
"string Lattitude\n"
"string Longitude\n"
"string Altitude\n"
"string Ve\n"
"string Vn\n"
"string Vu\n"
"string Baseline\n"
"string NSV1\n"
"string NSV2\n"
"string Status\n"
"string FPD_Cs\n"
"\n"
"string IMU_Header\n"
"string IMU_GPSWeek\n"
"string IMU_GPSTime\n"
"string GyroX\n"
"string GyroY\n"
"string GyroZ\n"
"string AccX\n"
"string AccY\n"
"string AccZ\n"
"string Tpr\n"
"string IMU_Cs\n"
"float64 x \n"
"float64 y\n"
;
  }

  static const char* value(const ::localization::gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FPD_Header);
      stream.next(m.FPD_GPSWeek);
      stream.next(m.FPD_GPSTime);
      stream.next(m.Heading);
      stream.next(m.Pitch);
      stream.next(m.Roll);
      stream.next(m.Lattitude);
      stream.next(m.Longitude);
      stream.next(m.Altitude);
      stream.next(m.Ve);
      stream.next(m.Vn);
      stream.next(m.Vu);
      stream.next(m.Baseline);
      stream.next(m.NSV1);
      stream.next(m.NSV2);
      stream.next(m.Status);
      stream.next(m.FPD_Cs);
      stream.next(m.IMU_Header);
      stream.next(m.IMU_GPSWeek);
      stream.next(m.IMU_GPSTime);
      stream.next(m.GyroX);
      stream.next(m.GyroY);
      stream.next(m.GyroZ);
      stream.next(m.AccX);
      stream.next(m.AccY);
      stream.next(m.AccZ);
      stream.next(m.Tpr);
      stream.next(m.IMU_Cs);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::gps_<ContainerAllocator>& v)
  {
    s << indent << "FPD_Header: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.FPD_Header);
    s << indent << "FPD_GPSWeek: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.FPD_GPSWeek);
    s << indent << "FPD_GPSTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.FPD_GPSTime);
    s << indent << "Heading: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Heading);
    s << indent << "Pitch: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Pitch);
    s << indent << "Roll: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Roll);
    s << indent << "Lattitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Lattitude);
    s << indent << "Longitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Longitude);
    s << indent << "Altitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Altitude);
    s << indent << "Ve: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Ve);
    s << indent << "Vn: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Vn);
    s << indent << "Vu: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Vu);
    s << indent << "Baseline: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Baseline);
    s << indent << "NSV1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.NSV1);
    s << indent << "NSV2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.NSV2);
    s << indent << "Status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Status);
    s << indent << "FPD_Cs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.FPD_Cs);
    s << indent << "IMU_Header: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.IMU_Header);
    s << indent << "IMU_GPSWeek: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.IMU_GPSWeek);
    s << indent << "IMU_GPSTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.IMU_GPSTime);
    s << indent << "GyroX: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.GyroX);
    s << indent << "GyroY: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.GyroY);
    s << indent << "GyroZ: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.GyroZ);
    s << indent << "AccX: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.AccX);
    s << indent << "AccY: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.AccY);
    s << indent << "AccZ: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.AccZ);
    s << indent << "Tpr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Tpr);
    s << indent << "IMU_Cs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.IMU_Cs);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_GPS_H
