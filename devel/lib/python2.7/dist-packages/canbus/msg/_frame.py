# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from canbus/frame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class frame(genpy.Message):
  _md5sum = "9aaf52d1c4f27f1011105abbe0b2efe7"
  _type = "canbus/frame"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 VI_GearInfo  
int32 VI_BrakeInfo  
int32 VI_Button1  
int32 VI_Button2  
int32 VI_HandBrakeSt  
int32 VI_JerkSt  
float64 VI_AccelPedalPosition  
float64 VI_FrontSteeringAngle  
float64 VI_RemainingTimes  
float64 VI_VehicleSpeed  
float64 SI2_LongitudinalAccel  
float64 SI2_LateralAccel  
float64 SI2_YawRate  

float64 SR_CurrentSteeringAngle 
float64 SR_CurrentSteeringSpeed 
float64 SR_HandTorque
float64 SR_HandTorqueSign
int32 SR_WorkMode 
float64 SR_HandTorqueLimit 
int32 SR_Error
int32 SR_Warning 
float64 SR_LiveCounter """
  __slots__ = ['VI_GearInfo','VI_BrakeInfo','VI_Button1','VI_Button2','VI_HandBrakeSt','VI_JerkSt','VI_AccelPedalPosition','VI_FrontSteeringAngle','VI_RemainingTimes','VI_VehicleSpeed','SI2_LongitudinalAccel','SI2_LateralAccel','SI2_YawRate','SR_CurrentSteeringAngle','SR_CurrentSteeringSpeed','SR_HandTorque','SR_HandTorqueSign','SR_WorkMode','SR_HandTorqueLimit','SR_Error','SR_Warning','SR_LiveCounter']
  _slot_types = ['int32','int32','int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','float64','int32','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VI_GearInfo,VI_BrakeInfo,VI_Button1,VI_Button2,VI_HandBrakeSt,VI_JerkSt,VI_AccelPedalPosition,VI_FrontSteeringAngle,VI_RemainingTimes,VI_VehicleSpeed,SI2_LongitudinalAccel,SI2_LateralAccel,SI2_YawRate,SR_CurrentSteeringAngle,SR_CurrentSteeringSpeed,SR_HandTorque,SR_HandTorqueSign,SR_WorkMode,SR_HandTorqueLimit,SR_Error,SR_Warning,SR_LiveCounter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(frame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VI_GearInfo is None:
        self.VI_GearInfo = 0
      if self.VI_BrakeInfo is None:
        self.VI_BrakeInfo = 0
      if self.VI_Button1 is None:
        self.VI_Button1 = 0
      if self.VI_Button2 is None:
        self.VI_Button2 = 0
      if self.VI_HandBrakeSt is None:
        self.VI_HandBrakeSt = 0
      if self.VI_JerkSt is None:
        self.VI_JerkSt = 0
      if self.VI_AccelPedalPosition is None:
        self.VI_AccelPedalPosition = 0.
      if self.VI_FrontSteeringAngle is None:
        self.VI_FrontSteeringAngle = 0.
      if self.VI_RemainingTimes is None:
        self.VI_RemainingTimes = 0.
      if self.VI_VehicleSpeed is None:
        self.VI_VehicleSpeed = 0.
      if self.SI2_LongitudinalAccel is None:
        self.SI2_LongitudinalAccel = 0.
      if self.SI2_LateralAccel is None:
        self.SI2_LateralAccel = 0.
      if self.SI2_YawRate is None:
        self.SI2_YawRate = 0.
      if self.SR_CurrentSteeringAngle is None:
        self.SR_CurrentSteeringAngle = 0.
      if self.SR_CurrentSteeringSpeed is None:
        self.SR_CurrentSteeringSpeed = 0.
      if self.SR_HandTorque is None:
        self.SR_HandTorque = 0.
      if self.SR_HandTorqueSign is None:
        self.SR_HandTorqueSign = 0.
      if self.SR_WorkMode is None:
        self.SR_WorkMode = 0
      if self.SR_HandTorqueLimit is None:
        self.SR_HandTorqueLimit = 0.
      if self.SR_Error is None:
        self.SR_Error = 0
      if self.SR_Warning is None:
        self.SR_Warning = 0
      if self.SR_LiveCounter is None:
        self.SR_LiveCounter = 0.
    else:
      self.VI_GearInfo = 0
      self.VI_BrakeInfo = 0
      self.VI_Button1 = 0
      self.VI_Button2 = 0
      self.VI_HandBrakeSt = 0
      self.VI_JerkSt = 0
      self.VI_AccelPedalPosition = 0.
      self.VI_FrontSteeringAngle = 0.
      self.VI_RemainingTimes = 0.
      self.VI_VehicleSpeed = 0.
      self.SI2_LongitudinalAccel = 0.
      self.SI2_LateralAccel = 0.
      self.SI2_YawRate = 0.
      self.SR_CurrentSteeringAngle = 0.
      self.SR_CurrentSteeringSpeed = 0.
      self.SR_HandTorque = 0.
      self.SR_HandTorqueSign = 0.
      self.SR_WorkMode = 0
      self.SR_HandTorqueLimit = 0.
      self.SR_Error = 0
      self.SR_Warning = 0
      self.SR_LiveCounter = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6i11did2id().pack(_x.VI_GearInfo, _x.VI_BrakeInfo, _x.VI_Button1, _x.VI_Button2, _x.VI_HandBrakeSt, _x.VI_JerkSt, _x.VI_AccelPedalPosition, _x.VI_FrontSteeringAngle, _x.VI_RemainingTimes, _x.VI_VehicleSpeed, _x.SI2_LongitudinalAccel, _x.SI2_LateralAccel, _x.SI2_YawRate, _x.SR_CurrentSteeringAngle, _x.SR_CurrentSteeringSpeed, _x.SR_HandTorque, _x.SR_HandTorqueSign, _x.SR_WorkMode, _x.SR_HandTorqueLimit, _x.SR_Error, _x.SR_Warning, _x.SR_LiveCounter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 140
      (_x.VI_GearInfo, _x.VI_BrakeInfo, _x.VI_Button1, _x.VI_Button2, _x.VI_HandBrakeSt, _x.VI_JerkSt, _x.VI_AccelPedalPosition, _x.VI_FrontSteeringAngle, _x.VI_RemainingTimes, _x.VI_VehicleSpeed, _x.SI2_LongitudinalAccel, _x.SI2_LateralAccel, _x.SI2_YawRate, _x.SR_CurrentSteeringAngle, _x.SR_CurrentSteeringSpeed, _x.SR_HandTorque, _x.SR_HandTorqueSign, _x.SR_WorkMode, _x.SR_HandTorqueLimit, _x.SR_Error, _x.SR_Warning, _x.SR_LiveCounter,) = _get_struct_6i11did2id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6i11did2id().pack(_x.VI_GearInfo, _x.VI_BrakeInfo, _x.VI_Button1, _x.VI_Button2, _x.VI_HandBrakeSt, _x.VI_JerkSt, _x.VI_AccelPedalPosition, _x.VI_FrontSteeringAngle, _x.VI_RemainingTimes, _x.VI_VehicleSpeed, _x.SI2_LongitudinalAccel, _x.SI2_LateralAccel, _x.SI2_YawRate, _x.SR_CurrentSteeringAngle, _x.SR_CurrentSteeringSpeed, _x.SR_HandTorque, _x.SR_HandTorqueSign, _x.SR_WorkMode, _x.SR_HandTorqueLimit, _x.SR_Error, _x.SR_Warning, _x.SR_LiveCounter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 140
      (_x.VI_GearInfo, _x.VI_BrakeInfo, _x.VI_Button1, _x.VI_Button2, _x.VI_HandBrakeSt, _x.VI_JerkSt, _x.VI_AccelPedalPosition, _x.VI_FrontSteeringAngle, _x.VI_RemainingTimes, _x.VI_VehicleSpeed, _x.SI2_LongitudinalAccel, _x.SI2_LateralAccel, _x.SI2_YawRate, _x.SR_CurrentSteeringAngle, _x.SR_CurrentSteeringSpeed, _x.SR_HandTorque, _x.SR_HandTorqueSign, _x.SR_WorkMode, _x.SR_HandTorqueLimit, _x.SR_Error, _x.SR_Warning, _x.SR_LiveCounter,) = _get_struct_6i11did2id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i11did2id = None
def _get_struct_6i11did2id():
    global _struct_6i11did2id
    if _struct_6i11did2id is None:
        _struct_6i11did2id = struct.Struct("<6i11did2id")
    return _struct_6i11did2id
