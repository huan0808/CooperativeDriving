# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localization/gps.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gps(genpy.Message):
  _md5sum = "6cefa42fc634a5edcdb1a380b1794e86"
  _type = "localization/gps"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string FPD_Header
string FPD_GPSWeek
string FPD_GPSTime
string Heading
string Pitch
string Roll
string Lattitude
string Longitude
string Altitude
string Ve
string Vn
string Vu
string Baseline
string NSV1
string NSV2
string Status
string FPD_Cs

string IMU_Header
string IMU_GPSWeek
string IMU_GPSTime
string GyroX
string GyroY
string GyroZ
string AccX
string AccY
string AccZ
string Tpr
string IMU_Cs
float64 x 
float64 y
"""
  __slots__ = ['FPD_Header','FPD_GPSWeek','FPD_GPSTime','Heading','Pitch','Roll','Lattitude','Longitude','Altitude','Ve','Vn','Vu','Baseline','NSV1','NSV2','Status','FPD_Cs','IMU_Header','IMU_GPSWeek','IMU_GPSTime','GyroX','GyroY','GyroZ','AccX','AccY','AccZ','Tpr','IMU_Cs','x','y']
  _slot_types = ['string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FPD_Header,FPD_GPSWeek,FPD_GPSTime,Heading,Pitch,Roll,Lattitude,Longitude,Altitude,Ve,Vn,Vu,Baseline,NSV1,NSV2,Status,FPD_Cs,IMU_Header,IMU_GPSWeek,IMU_GPSTime,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,Tpr,IMU_Cs,x,y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gps, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FPD_Header is None:
        self.FPD_Header = ''
      if self.FPD_GPSWeek is None:
        self.FPD_GPSWeek = ''
      if self.FPD_GPSTime is None:
        self.FPD_GPSTime = ''
      if self.Heading is None:
        self.Heading = ''
      if self.Pitch is None:
        self.Pitch = ''
      if self.Roll is None:
        self.Roll = ''
      if self.Lattitude is None:
        self.Lattitude = ''
      if self.Longitude is None:
        self.Longitude = ''
      if self.Altitude is None:
        self.Altitude = ''
      if self.Ve is None:
        self.Ve = ''
      if self.Vn is None:
        self.Vn = ''
      if self.Vu is None:
        self.Vu = ''
      if self.Baseline is None:
        self.Baseline = ''
      if self.NSV1 is None:
        self.NSV1 = ''
      if self.NSV2 is None:
        self.NSV2 = ''
      if self.Status is None:
        self.Status = ''
      if self.FPD_Cs is None:
        self.FPD_Cs = ''
      if self.IMU_Header is None:
        self.IMU_Header = ''
      if self.IMU_GPSWeek is None:
        self.IMU_GPSWeek = ''
      if self.IMU_GPSTime is None:
        self.IMU_GPSTime = ''
      if self.GyroX is None:
        self.GyroX = ''
      if self.GyroY is None:
        self.GyroY = ''
      if self.GyroZ is None:
        self.GyroZ = ''
      if self.AccX is None:
        self.AccX = ''
      if self.AccY is None:
        self.AccY = ''
      if self.AccZ is None:
        self.AccZ = ''
      if self.Tpr is None:
        self.Tpr = ''
      if self.IMU_Cs is None:
        self.IMU_Cs = ''
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
    else:
      self.FPD_Header = ''
      self.FPD_GPSWeek = ''
      self.FPD_GPSTime = ''
      self.Heading = ''
      self.Pitch = ''
      self.Roll = ''
      self.Lattitude = ''
      self.Longitude = ''
      self.Altitude = ''
      self.Ve = ''
      self.Vn = ''
      self.Vu = ''
      self.Baseline = ''
      self.NSV1 = ''
      self.NSV2 = ''
      self.Status = ''
      self.FPD_Cs = ''
      self.IMU_Header = ''
      self.IMU_GPSWeek = ''
      self.IMU_GPSTime = ''
      self.GyroX = ''
      self.GyroY = ''
      self.GyroZ = ''
      self.AccX = ''
      self.AccY = ''
      self.AccZ = ''
      self.Tpr = ''
      self.IMU_Cs = ''
      self.x = 0.
      self.y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.FPD_Header
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_GPSWeek
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_GPSTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Heading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Pitch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Roll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Lattitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Longitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Altitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Ve
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Vn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Vu
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Baseline
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.NSV1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.NSV2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_Cs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_Header
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_GPSWeek
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_GPSTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroZ
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccZ
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Tpr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_Cs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_Header = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_Header = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_GPSWeek = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_GPSWeek = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_GPSTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_GPSTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Heading = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Heading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Pitch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Pitch = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Roll = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Roll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Lattitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Lattitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Longitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Longitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Altitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Altitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Ve = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Ve = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Vn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Vn = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Vu = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Vu = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Baseline = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Baseline = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NSV1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.NSV1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NSV2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.NSV2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_Cs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_Cs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_Header = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_Header = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_GPSWeek = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_GPSWeek = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_GPSTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_GPSTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroZ = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroZ = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccZ = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccZ = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Tpr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Tpr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_Cs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_Cs = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.FPD_Header
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_GPSWeek
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_GPSTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Heading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Pitch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Roll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Lattitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Longitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Altitude
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Ve
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Vn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Vu
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Baseline
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.NSV1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.NSV2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.FPD_Cs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_Header
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_GPSWeek
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_GPSTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.GyroZ
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.AccZ
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Tpr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IMU_Cs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_Header = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_Header = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_GPSWeek = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_GPSWeek = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_GPSTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_GPSTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Heading = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Heading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Pitch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Pitch = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Roll = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Roll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Lattitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Lattitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Longitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Longitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Altitude = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Altitude = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Ve = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Ve = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Vn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Vn = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Vu = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Vu = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Baseline = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Baseline = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NSV1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.NSV1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NSV2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.NSV2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.FPD_Cs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.FPD_Cs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_Header = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_Header = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_GPSWeek = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_GPSWeek = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_GPSTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_GPSTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.GyroZ = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.GyroZ = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.AccZ = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.AccZ = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Tpr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Tpr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_Cs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_Cs = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
